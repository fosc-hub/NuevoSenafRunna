"use client"

/**
 * PersonalInfoCard - Reusable Personal Information Display
 *
 * Displays legajo and persona information in an organized card layout.
 * Extracted from RegistroIntervencionModal for reusability.
 *
 * Features:
 * - Displays legajo number, nombres, apellidos, zona
 * - Optional código field (autogenerated or from intervention)
 * - Optional fecha field
 * - Read-only by default, can be made editable
 * - Responsive grid layout
 */

import type React from "react"
import { Box, TextField, Typography, Card } from "@mui/material"
import PersonIcon from "@mui/icons-material/Person"

export interface PersonalInfoData {
  codigo?: string
  fecha?: string
  legajoNumero?: string
  personaNombre?: string
  personaApellido?: string
  zonaNombre?: string
}

export interface PersonalInfoCardProps {
  data: PersonalInfoData
  readOnly?: boolean
  showCodigo?: boolean
  showFecha?: boolean
  onFechaChange?: (fecha: string) => void
  codigoHelperText?: string
  fechaRequired?: boolean
  fechaError?: string
}

export const PersonalInfoCard: React.FC<PersonalInfoCardProps> = ({
  data,
  readOnly = true,
  showCodigo = true,
  showFecha = true,
  onFechaChange,
  codigoHelperText = "Este código se genera automáticamente al guardar",
  fechaRequired = false,
  fechaError,
}) => {
  return (
    <Card elevation={2} sx={{ p: 3 }}>
      <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
        <PersonIcon sx={{ color: "primary.main", mr: 1 }} />
        <Typography variant="h6" sx={{ fontWeight: 600 }}>
          Información Personal
        </Typography>
      </Box>

      <Box
        sx={{
          display: "grid",
          gridTemplateColumns: { xs: "1fr", md: "1fr 1fr" },
          gap: 2,
        }}
      >
        {/* Código (if shown) */}
        {showCodigo && (
          <TextField
            label="Código"
            value={data.codigo || "Autogenerado"}
            disabled
            variant="outlined"
            helperText={codigoHelperText}
          />
        )}

        {/* Fecha de intervención (if shown) */}
        {showFecha && (
          <TextField
            label="Fecha de intervención"
            type="date"
            value={data.fecha || ""}
            onChange={(e) => onFechaChange?.(e.target.value)}
            InputLabelProps={{ shrink: true }}
            required={fechaRequired}
            disabled={readOnly}
            error={!!fechaError}
            helperText={fechaError}
          />
        )}

        {/* Legajo */}
        <TextField
          label="Legajo"
          value={data.legajoNumero || ""}
          disabled
          variant="outlined"
          helperText="Datos del legajo (autocompletado)"
        />

        {/* Empty cell for grid alignment */}
        {!showCodigo && !showFecha && <Box />}

        {/* Nombre */}
        <TextField
          label="Nombre"
          value={data.personaNombre || ""}
          disabled
          variant="outlined"
        />

        {/* Apellido */}
        <TextField
          label="Apellido"
          value={data.personaApellido || ""}
          disabled
          variant="outlined"
        />

        {/* Zona/UDER */}
        <TextField
          label="Zona/UDER"
          value={data.zonaNombre || ""}
          disabled
          variant="outlined"
          sx={{ gridColumn: { md: "span 2" } }}
        />
      </Box>
    </Card>
  )
}
