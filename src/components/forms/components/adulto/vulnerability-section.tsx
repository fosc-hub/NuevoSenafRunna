"use client"

import type React from "react"
import { Grid, FormControl, Autocomplete, TextField, Chip, Box, Typography } from "@mui/material"
import { Controller, type Control } from "react-hook-form"
import { Warning as WarningIcon } from "@mui/icons-material"
import FormSection from "../form-section"
import type { DropdownData, FormData } from "../../types/formTypes"

interface VulnerabilitySectionProps {
  index: number
  control: Control<FormData>
  dropdownData: DropdownData
  readOnly: boolean
}

const VulnerabilitySection: React.FC<VulnerabilitySectionProps> = ({ index, control, dropdownData, readOnly }) => {
  return (
    <FormSection title="Condiciones de Vulnerabilidad" icon={<WarningIcon />}>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Controller
            name={`adultosConvivientes.${index}.condicionesVulnerabilidad`}
            control={control}
            render={({ field, fieldState: { error } }) => (
              <FormControl fullWidth error={!!error} sx={{ mb: 2 }}>
                <Autocomplete
                  disabled={readOnly}
                  multiple
                  options={dropdownData.condiciones_vulnerabilidad?.filter((cv: any) => cv.adulto && !cv.nnya) || []}
                  getOptionLabel={(option: any) => {
                    if (!option || typeof option !== 'object') return ""
                    return option.nombre ? `${option.nombre} (Peso: ${option.peso || 0})` : ""
                  }}
                  value={(field.value || [])
                    .map((id: any) => dropdownData.condiciones_vulnerabilidad?.find((cv) => cv.id === id))
                    .filter(Boolean)}
                  onChange={(_, newValues) => {
                    field.onChange(newValues?.map((item: any) => item?.id).filter(Boolean) || [])
                  }}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Condiciones de Vulnerabilidad"
                      error={!!error}
                      helperText={error?.message}
                      size="small"
                      placeholder="Seleccione las condiciones aplicables"
                    />
                  )}
                  renderTags={(tagValue, getTagProps) =>
                    tagValue.map((option: any, tagIndex: number) => (
                      <Chip
                        key={`adult-vulnerability-${option.id}-${tagIndex}`}
                        label={`${option.nombre} (Peso: ${option.peso})`}
                        {...getTagProps({ index: tagIndex })}
                        size="small"
                        color="primary"
                        variant="outlined"
                      />
                    ))
                  }
                  size="small"
                />
                {/* Display total count of selected conditions */}
                <Box
                  sx={{
                    mt: 1,
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                  }}
                >
                  <Typography variant="caption" color="text.secondary">
                    Total seleccionado: {(field.value || []).length}
                  </Typography>
                  {(field.value || []).length > 0 && (
                    <Chip
                      label={`Peso total: ${(field.value || [])
                        .map((id: any) => dropdownData.condiciones_vulnerabilidad?.find((cv) => cv.id === id))
                        .filter(Boolean)
                        .reduce((sum: number, condition: any) => sum + (condition?.peso || 0), 0)}`}
                      size="small"
                      color="warning"
                      variant="outlined"
                    />
                  )}
                </Box>
              </FormControl>
            )}
          />
        </Grid>
      </Grid>
    </FormSection>
  )
}

export default VulnerabilitySection
