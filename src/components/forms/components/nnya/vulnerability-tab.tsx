"use client"

import type React from "react"
import { Grid, FormControl, Autocomplete, TextField, Chip, Box, Typography } from "@mui/material"
import { Controller, type Control, type UseFormSetValue } from "react-hook-form"
import { Warning as WarningIcon, Gavel as GavelIcon } from "@mui/icons-material"
import FormSection from "../form-section"
import VulneracionesFieldArray from "../../VulneracionesFieldsArray"
import type { DropdownData, FormData } from "../../types/formTypes"

interface VulnerabilityTabProps {
  index: number
  control: Control<FormData>
  dropdownData: DropdownData
  readOnly: boolean
  watchedFields: any
  setValue: UseFormSetValue<FormData>
}

const VulnerabilityTab: React.FC<VulnerabilityTabProps> = ({
  index,
  control,
  dropdownData,
  readOnly,
  watchedFields,
  setValue,
}) => {
  return (
    <>
      {/* Sección de Vulnerabilidad */}
      <FormSection title="Condiciones de Vulnerabilidad" icon={<WarningIcon />}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Controller
              name={`ninosAdolescentes.${index}.condicionesVulnerabilidad`}
              control={control}
              render={({ field, fieldState: { error } }) => (
                <FormControl fullWidth error={!!error} sx={{ mb: 2 }}>
                  <Autocomplete
                    disabled={readOnly}
                    multiple
                    options={dropdownData.condiciones_vulnerabilidad?.filter((cv) => cv.nnya && !cv.adulto) || []}
                    getOptionLabel={(option: any) => {
                      if (!option || typeof option !== 'object') return ""
                      return option.nombre ? `${option.nombre} (Peso: ${option.peso || 0})` : ""
                    }}
                    value={(field.value || [])
                      .map((id: any) => dropdownData.condiciones_vulnerabilidad?.find((cv) => cv.id === id))
                      .filter(Boolean)}
                    onChange={(_, newValues) => {
                      field.onChange(newValues?.map((item: any) => item?.id).filter(Boolean) || [])
                    }}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        label="Condiciones de Vulnerabilidad"
                        error={!!error}
                        helperText={error?.message}
                        size="small"
                        placeholder="Seleccione las condiciones aplicables"
                      />
                    )}
                    renderTags={(tagValue, getTagProps) =>
                      tagValue.map((option: any, tagIndex: number) => (
                        <Chip
                          key={`vulnerability-${option.id}-${tagIndex}`}
                          label={`${option.nombre} (Peso: ${option.peso})`}
                          {...getTagProps({ index: tagIndex })}
                          size="small"
                          color="warning"
                          variant="outlined"
                        />
                      ))
                    }
                    size="small"
                  />
                  {/* Display total count of selected conditions */}
                  <Box
                    sx={{
                      mt: 1,
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                  >
                    <Typography variant="caption" color="text.secondary">
                      Total seleccionado: {(field.value || []).length}
                    </Typography>
                    {(field.value || []).length > 0 && (
                      <Chip
                        label={`Peso total: ${(field.value || [])
                          .map((id: any) => dropdownData.condiciones_vulnerabilidad?.find((cv) => cv.id === id))
                          .filter(Boolean)
                          .reduce((sum: number, condition: any) => sum + (condition?.peso || 0), 0)}`}
                        size="small"
                        color="warning"
                        variant="outlined"
                      />
                    )}
                  </Box>
                </FormControl>
              )}
            />
          </Grid>
        </Grid>
      </FormSection>

      {/* Sección de Vulneraciones */}
      <FormSection title="Presunta Vulneración de Derechos" icon={<GavelIcon />}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <VulneracionesFieldArray
              nestIndex={index}
              control={control}
              readOnly={readOnly}
              dropdownData={dropdownData}
              watchedValues={watchedFields}
              setValue={setValue}
            />
          </Grid>
        </Grid>
      </FormSection>
    </>
  )
}

export default VulnerabilityTab
